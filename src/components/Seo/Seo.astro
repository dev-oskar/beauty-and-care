---
import { getImage } from "astro:assets";
import { type CollectionEntry } from "astro:content";
import { SEO } from "astro-seo";

// component import
import siteData from "@config/siteData.json";

interface BaseProps {
	title: string;
	description: string;
	noindex?: boolean;
	lang?: string;
	keywords?: string[];
	canonicalUrl?: string;
}

interface GenProps extends BaseProps {
	type: "general" | undefined;
	image?: ImageMetadata;
}

const { 
	title = "general", 
	description, 
	image, 
	noindex = false,
	lang = "pl",
	keywords = [],
	canonicalUrl: customCanonicalUrl,
} = Astro.props as GenProps;

let optimizedImage;
const canonicalUrl = new URL(Astro.url.pathname, Astro.site);

// if this is a blog page we do things differently
if (image) {
	optimizedImage = await getImage({
		src: image,
		format: "webp",
		quality: "high",
		width: 1200,
	});
}

function trimEndSlash(str: string) {
	if (str[str.length - 1] === "/") {
		return str.slice(0, -1);
	} else {
		return str;
	}
}

// put together the image URL
const imageUrl =
	trimEndSlash(Astro.site?.toString() || "") + (optimizedImage?.src || siteData.defaultImage.src);
	
// Build the schema.org structured data
const websiteSchema = {
	"@context": "https://schema.org",
	"@type": "WebSite",
	"name": siteData.title,
	"url": Astro.site?.toString(),
	"description": siteData.description,
	"inLanguage": lang,
	"publisher": {
		"@type": "Organization",
		"name": siteData.name,
		"logo": {
			"@type": "ImageObject",
			"url": new URL(siteData.defaultImage.src, Astro.site).toString(),
			"width": "192",
			"height": "192"
		}
	}
};

// Local business schema
const localBusinessSchema = {
	"@context": "https://schema.org",
	"@type": "BeautySalon",
	"name": siteData.name,
	"image": imageUrl,
	"url": Astro.site?.toString(),
	"description": siteData.description,
	"address": {
		"@type": "PostalAddress",
		"streetAddress": siteData.business?.address || "Fryderyka Szopena 33",
		"addressLocality": siteData.business?.city || "Rzesz√≥w",
		"postalCode": siteData.business?.postalCode || "33-055",
		"addressCountry": siteData.business?.country || "PL"
	},
	"telephone": siteData.business?.phone || "+48 123 456 789",
	"email": siteData.business?.email || siteData.author.email,
	"priceRange": siteData.business?.priceRange || "$$",
	"openingHoursSpecification": [
		{
			"@type": "OpeningHoursSpecification",
			"dayOfWeek": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
			"opens": "10:00",
			"closes": "20:00"
		},
		{
			"@type": "OpeningHoursSpecification",
			"dayOfWeek": "Saturday",
			"opens": "10:00",
			"closes": "16:00"
		}
	],
	"sameAs": [
		siteData.social?.facebook,
		siteData.social?.instagram,
		siteData.social?.twitter,
		siteData.social?.youtube
	].filter(Boolean) // Remove undefined values
};
---

<SEO
	title={title}
	description={description}
	canonical={customCanonicalUrl || canonicalUrl.toString()}
	openGraph={{
		basic: {
			title: title,
			type: "website",
			image: imageUrl,
			url: canonicalUrl.toString(),
		},
		optional: {
			description: description,
			siteName: siteData.title,
			locale: "pl_PL",
		},
		image: {
			type: "image/webp",
			width: optimizedImage?.attributes.width || "1200",
			height: optimizedImage?.attributes.height || "800",
			alt: title,
		},
	}}
	twitter={{
		site: "@" + siteData.author.twitter,
		creator: "@" + siteData.author.twitter,
		card: "summary_large_image",
		title: title,
		description: description,
		image: imageUrl,
	}}
	extend={{
		meta: [
			{ name: "keywords", content: keywords.join(", ") },
			{ name: "language", content: lang },
		],
		link: [
			{ rel: "alternate", hreflang: lang, href: customCanonicalUrl || canonicalUrl.toString() }
		],
	}}
	noindex={noindex}
	nofollow={noindex}
/>

<!-- Schema.org structured data -->
<script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />
<script type="application/ld+json" set:html={JSON.stringify(localBusinessSchema)} />
